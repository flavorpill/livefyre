// Generated by CoffeeScript 1.7.1
(function() {
  var cookie, defaultDelegate, fill_element_config, load, utils, _global_options, _initialized;

  defaultDelegate = function(options) {
    var authDelegate, k, v, _ref;
    authDelegate = new fyre.conv.RemoteAuthDelegate();
    _ref = options.auth;
    for (k in _ref) {
      v = _ref[k];
      authDelegate[k] = v;
    }
    return authDelegate;
  };

  load = null;

  (function() {
    var fjs, __loadedScripts;
    __loadedScripts = [];
    fjs = null;
    return load = function(source, id, options) {
      var js, k, v;
      if (document.getElementById(id)) {
        return;
      }
      if (__loadedScripts[id]) {
        return;
      }
      __loadedScripts[id] = true;
      if (!fjs) {
        fjs = document.getElementsByTagName('script')[0];
      }
      js = document.createElement("script");
      js.id = id;
      js.async = true;
      js.src = source;
      if (options) {
        for (k in options) {
          v = options[k];
          js[k] = v;
        }
      }
      fjs.parentNode.insertBefore(js, fjs);
      return js;
    };
  })();

  cookie = function(token) {
    var m;
    m = document.cookie.match(new RegExp(token + "=([^;]+)"));
    if (m) {
      return m[1];
    } else {
      return null;
    }
  };

  utils = function(options) {
    var obj;
    return obj = {
      load: load,
      startLogin: function(url, width, height, callback, windowName) {
        var left, popup, top;
        if (width == null) {
          width = 600;
        }
        if (height == null) {
          height = 400;
        }
        if (callback == null) {
          callback = null;
        }
        if (windowName == null) {
          windowName = null;
        }
        left = (screen.width / 2) - (width / 2);
        top = (screen.height / 2) - (height / 2);
        popup = window.open(url, windowName, "menubar=no,toolbar=no,status=no,width=" + width + ",height=" + height + ",toolbar=no,left=" + left + ",top=" + top);
        this.finishCallback = callback;
        return this.startLoginPopup(popup);
      },
      startLoginPopup: function(popup) {
        this.tries = 0;
        this.popup = popup;
        return this.timer = setInterval((function(_this) {
          return function() {
            return _this.__checkLogin();
          };
        })(this), 100);
      },
      __checkLogin: function() {
        var err, token;
        token = cookie(options.cookie_name || "livefyre_utoken");
        if (token && this.timer) {
          clearInterval(this.timer);
          if (this.popup) {
            this.popup.close();
          }
          this.popup = null;
          this.timer = null;
          if (this.finishCallback) {
            this.finishCallback();
          }
          return window.fyre.conv.login(token);
        } else if (this.popup && this.popup.closed) {
          try {
            this.tries += 1;
            if (this.tries > 30) {
              clearInterval(this.timer);
              this.timer = null;
              return this.popup = null;
            }
          } catch (_error) {
            err = _error;
          }
        }
      }
    };
  };

  _global_options = null;

  fill_element_config = function(element, config) {
    var e;
    e = document.getElementById(element);
    if (e) {
      config || (config = {
        checksum: e.getAttribute("data-checksum"),
        collectionMeta: e.getAttribute("data-collection-meta"),
        articleId: e.getAttribute("data-article-id"),
        siteId: e.getAttribute("data-site-id"),
        postToButtons: JSON.parse(e.getAttribute("data-post-to-buttons")),
        el: e.id
      });
      if (e.getAttribute("data-app")) {
        config['app'] = e.getAttribute("data-app");
      }
      _global_options || (_global_options = {
        network: e.getAttribute("data-network"),
        domain: e.getAttribute("data-domain"),
        root: e.getAttribute("data-root")
      });
      return config;
    } else {
      console.log("Element " + element + " was not found");
      return null;
    }
  };

  _initialized = false;

  this.initLivefyre = function(options) {
    var configs, element, i, returnable;
    if (_initialized && !options.force) {
      throw "Livefyre has already been initialized";
    }
    _initialized = true;
    options.elements || (options.elements = options.element_id ? [options.element_id] : ["livefyre_comments"]);
    configs = options.config ? [options.config] : (function() {
      var _i, _len, _ref, _results;
      _ref = options.elements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(null);
      }
      return _results;
    })();
    options.element_configs = (function() {
      var _i, _len, _ref, _results;
      _ref = options.elements;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        element = _ref[i];
        _results.push(fill_element_config(element, configs[i]));
      }
      return _results;
    })();
    options.element_configs = options.element_configs.filter(function(element_config) {
      return element_config !== null;
    });
    if (options.element_configs.length === 0) {
      return null;
    }
    returnable = utils(options);
    options.network = options.network || _global_options.network;
    options.root = options.root || _global_options.root;
    options.domain = options.domain || _global_options.domain;
    this.FYRE_LOADED_CB = function() {
      var opts, _i, _len, _ref;
      if (options.preLoad) {
        options.preLoad(fyre);
      }
      opts = {
        network: options.network,
        authDelegate: options.delegate || defaultDelegate(options)
      };
      _ref = options.element_configs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        console.log(element);
      }
      return fyre.conv.load(opts, options.element_configs, function(widget) {
        var error, token;
        returnable.widget = widget;
        token = cookie(options.cookie_name || "livefyre_utoken");
        if (token) {
          try {
            return fyre.conv.login(token);
          } catch (_error) {
            error = _error;
            if (window.console) {
              return window.console.log("Error logging in:", e);
            }
          }
        }
      });
    };
    if (!options.manualLoad) {
      return element = load("http://" + options.root + "/wjs/v3.0/javascripts/livefyre.js", null, {
        "data-lf-domain": options.network
      });
    }
  };

}).call(this);
