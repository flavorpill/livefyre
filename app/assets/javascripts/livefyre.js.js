// Generated by CoffeeScript 1.3.3
(function() {
  var defaultDelegate, livefyreInitialized, loadScriptAsync;

  defaultDelegate = function(options) {
    var authDelegate;
    authDelegate = new fyre.conv.RemoteAuthDelegate();
    authDelegate.login = function(handlers) {
      if (options.login) {
        return options.login(handlers);
      }
    };
    authDelegate.logout = function(handlers) {
      if (options.logout) {
        return options.logout(handlers);
      }
    };
    authDelegate.viewProfile = function(handlers, author) {
      if (options.viewProfile) {
        if (options.viewProfile(handlers, author)) {
          return handlers.success();
        }
      }
    };
    return authDelegate.editProfile = function(handlers, author) {
      if (options.editProfile) {
        if (options.editProfile(handlers, author)) {
          return handlers.success();
        }
      }
    };
  };

  loadScriptAsync = null;

  (function() {
    var fjs, __loadedScripts;
    __loadedScripts = [];
    fjs = null;
    return loadScriptAsync = function(source, id, content, options) {
      var js, k, v;
      if (!content) {
        content = null;
      }
      if (document.getElementById(id)) {
        return;
      }
      if (__loadedScripts[id]) {
        return;
      }
      __loadedScripts[id] = true;
      if (!fjs) {
        fjs = document.getElementsByTagName('script')[0];
      }
      js = document.createElement("script");
      js.id = id;
      js.async = true;
      js.src = source;
      js.innerHTML = content;
      if (options) {
        for (k in options) {
          v = options[k];
          js[k] = v;
        }
      }
      fjs.parentNode.insertBefore(js, fjs);
      return js;
    };
  })();

  livefyreInitialized = false;

  this.initLivefyre = function(options) {
    var e, element;
    if (livefyreInitialized) {
      throw "Livefyre has already been initialized";
    }
    livefyreInitialized = true;
    e = document.getElementById(options.element_id || "livefyre_comments");
    if (e) {
      options.config || (options.config = {
        checksum: e.getAttribute("data-checksum"),
        collectionMeta: e.getAttribute("data-collection-meta"),
        articleId: e.getAttribute("data-article-id"),
        siteId: e.getAttribute("data-site-id"),
        el: e.id
      });
      options.network || (options.network = e.getAttribute("data-network"));
      options.domain || (options.domain = e.getAttribute("data-domain"));
      options.root || (options.root = e.getAttribute("data-root"));
      this.FYRE_LOADED_CB = function() {
        var opts;
        opts = {
          network: options.network,
          authDelegate: options.delegate || defaultDelegate(options)
        };
        return fyre.conv.load(opts, [options.config], function() {
          var token;
          token = $.cookie(options.cookie_name || "livefyre_utoken");
          if (token) {
            try {
              return fyre.conv.login(token);
            } catch (error) {
              if (window.console) {
                return window.console.log("Error logging in:", e);
              }
            }
          }
        });
      };
      return element = loadScriptAsync("http://" + options.root + "/wjs/v3.0/javascripts/livefyre.js", null, null, {
        "data-lf-domain": options.network
      });
    }
  };

}).call(this);
